/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    // stack of NestedInteger type address
    stack<NestedInteger*> s;

    NestedIterator(vector<NestedInteger> &nestedList) {
        //push elements from back to front
        for(int i=nestedList.size()-1;i>=0;i--)
         s.push(&nestedList[i]);
    }
    
    int next() {
        //check if it integer?
        int value = s.top() -> getInteger();
        s.pop();
        return value;
    }
    
    bool hasNext() {
        while(!s.empty())
        {
            NestedInteger*itr = s.top();

            //if it integer,return true
            if(itr->isInteger())
            return true;

            vector<NestedInteger> &curr = itr->getList();

            s.pop();

            //start flattening the list now
            for(int i=curr.size()-1;i>=0;i--)
             s.push(&curr[i]);
        }
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
